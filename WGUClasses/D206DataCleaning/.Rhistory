b = b + 1
if (i > 2) {
break
}
}
}
# Problem 2
a <- c(1,2,3)
b <- c(4,5,6)
# Problem 2
a <- c(1,2,3)
b <- c(4,5,6)
for (i in 3) {
a = a + 1
for (i in 3) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
# Problem 2
a <- c(1)
b <- c(4)
for (i in 3) {
a = a + 1
for (i in 3) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
# Nested for loops
# Using the variables a,b write a nested for() loop wehee:
# the outer for loop increments a from 2 to 8 by 1
# the innder for loop increments b form 1 to 6 by 1
# if a <b output "a, ' less than ', b"
for (a in 2:8)
for (b in 1:6)
if (a<b)
cat(a, 'less than', b, '\n')  #\n allows linefeeds
for (i in 3){
a = a + 1
}
a
# Problem 2
a <- c(1)
for (i in 3){
a = a + 1
}
a
for (i in range(3)){
a = a + 1
}
# Problem 2
a <- c(1)
for (i in range(3)){
a = a + 1
}
# Problem 2
a <- c(1)
for (i in range(4)){
a = a + 1
}
for (i in range(4)){
a = a + 1
}
for (i in range(4)){
a = a + 1
}
for (i in range(4)){
a = a + 1
}
for (i in range(4)){
a = a + 1
}
for (i in range(8)){
a = a + 1
}
n <- c(letters[1:26], ncol = 2, nrow = 13)
n
y <- matrix(1:20, nrow = 5, ncol = 4)
y
n <- matrix(letters[1:26], ncol = 2, nrow = 13)
n
n <- matrix(toupper(letters[1:26]), ncol = 2, nrow = 13)
n
x <- [1:3]
x <- c[1:3]
x <- c(1:3)
for (i in x) {
a = a + 1
print
for (i in x) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
# Problem 2
a <- c(1)
b <- c(4)
for (i in x) {
a = a + 1
print
for (i in x) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
# Problem 2
a <- c(1)
b <- c(4)
x <- c(1:3)
for (i in x) {
a = a + 1
for (i in x) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
y <- c(1:3)
# Problem 2
a <- c(1)
b <- c(4)
x <- c(1:3)
y <- c(1:3)
for (i in x) {
a = a + 1
for (i in y) {
b = b + 1
if (i > 2) {
break
}
}
print(a,b)
}
# Lab 4b
# problem 1
cube <- function(x) {
cube <- x * x * x
return(cube)
}
cube(3)
cube(4)
# Problem 2
values <- function() {
str <- readline(prompt="What is your name?: ")
str <- readline(prompt="What is your address?: ")
str <- readline(prompt="What is your major?: ")
return(as.character("Thanks!"))
}
print(values())
# Problem 3
# Part a
vector<- function(y) {
x <- sum(y) / length(y)
print(x)
z <- median(y)
print(z)
}
print(vector())
print(vector(y))
vector(y)
vector()
# Problem 3
# Part a
vector<- function(y) {
str <- readline(prompt="What is your vector?: ")
str <- y
x <- sum(y) / length(y)
print(x)
z <- median(y)
print(z)
}
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
return("x","z")
}
vector(1,2,3,4,5,6,7,8,9,10,50)
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
print(x)
print(z)
}
vector(1,2,3,4,5,6,7,8,9,10,50)
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
print(x)
print(z)
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
print("Mean: ", x)
print("Meadian: ",z)
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
print("Mean: ", x)
print("Median: ", z)
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
cat("Mean: ", x)
cat("Median: ", z)
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# Problem 3
# Part a
vector <- function(y) {
x <- sum(y) / length(y)
z <- median(y)
cat("Mean: ", x, "\n")
cat("Median: ", z)
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# Problem 3
# Part a
vector <- function(y) {
cat("Mean: ", mean(y), "\n")
cat("Median: ", median(y))
}
vector(c(1,2,3,4,5,6,7,8,9,10,50))
# HW4 Q6
# Use cbind to construct the following matrix using the "LETTERS" constant
x <- c(1:5)
# HW4 Q6
# Use cbind to construct the following matrix using the "LETTERS" constant
v1 <- c(1:5)
v2 <- LETTERS[1:5]
cbind(v1,v2)
as.data.frame(cbind(v1,v2))
# Lab 4b
# Q4, write a for() loop that prints the first 4 numbers of this sequence
x <- c(7,4,3,8,9,25)
x[c(1:4)]
x1 <- 1:5
x1 <- 1:5
for (i in x) {
if (i==3){
break
}
print(i)
}
x1 <- 1:5
for (i in x) {
if (i==3){
break
}
print(i)
}
x1 <- 1:5
for (i in x1) {
if (i==3){
break
}
print(i)
}
# Nested for() loop
a <- 1:5
b <- 3:4
# Nested for() loop
a <- 1:5
b <- 3:4
for (i in a)
for (j in b) {
print(c(i,j))
}
# MODE function in R
k <- c("ann","john")
mode(k)
mode(c("ann","john"))
# Structure
Review <- c(2,3,6)
str(Review)
data <- c("east","west","east","north","north","east")
is.factor(data)
data <- factor(c("east","west","east","north","north","east"))
is.factor(data2)
data <- c("east","west","east","north","north","east")
is.factor(data)
data2 <- factor(c("east","west","east","north","north","east"))
is.factor(data2)
leveles(data2)
nlevels(data2)
levels(data2)
table(data2)
z<-c(7,1,1,1,2,2,7,7,3)
sort(z)
sort(z, decreasing = TRUE)
# While loop
i <- 1
while (i < 6) {
print(i)
i = i + 1
}
> x <- 1
x <- 1
print(x)
m <- matrix(nrow = 2, ncol = 3.5)
m
m <- mat(nrow = 2, ncol = 3.5)
m
m <- matrix(nrow = 2, ncol = 3)
dim(m)
m <- matrix(nrow = 2, ncol = 3.5)
dim(m)
x <- c("a","b","c","c","d","a")
[x[1:4]]
x[1:4]
x <- factor(c("yes", "yes", "no", "yes", "no"))
table(x)
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x<- c(4,6,5,7,10,9,4,15)
y<- c(0,10,1,8,2,3,4,1)
x*y
x <- c(1:12)
length(x)
x <- 1:3
y <- 10:12
cbind(x,y)
gender <- factor(c("male", "female", "female", "male"))
levels(gender)
nlevels(gender)
median(g=1:4)
date()
x <- c(2,3,4,5,6)
x[1]
sqr<- function(number) {
i<-1
while(i<=number){
s <- i^2
i=i+1
}
print(s)
}
sqr(2)
sqr(3)
x<-seq(from =15, to =5, by = -.2)
x[3]
fried<-c(1,3,-1,6,2,9)
chicken<-c(1,5,2)
fried*chicken
x<-data.frame(red= 1:4, blue =c("1","2","3","4"))
x
data <- data.frame(x=c(1,2,3), y=c(5, NA, 8))
na.omit(data)
z<-c(7,1,1,1,2,2,7,7,3)
MyFunction<-function(myVector) {
UniqueVals<-unique(myVector)
UniqueCounts<-tabulate(myVector)
return(UniqueVals[which.max(UniqueCounts)])
}
MyFunction(z)
unique(z)
tabulate(z)
UniqueVals[which.max(UniqueCounts)
UniqueVals[which.max(UniqueCounts)]
UniqueVals[which.max(UniqueCounts)]
uniqueVals[which.max(UniqueCounts)]
uniquevals[which.max(UniqueCounts)]
uniquevals <- unique(z)
uniquevals[which.max(UniqueCounts)]
UniqueCounts <- tabulate(z)
uniquevals[which.max(UniqueCounts)]
which.max(UniqueCounts)
sd(z)
data(CO2)
View(CO2)
data("CO2")
edited_CO2<-subset(CO2, select = -c(uptake))
edited_CO2
edited_CO21<-select(CO2$Plant,Type,Treatment,conc)
midterm<-c("Last", "Question")
count<-2
while(count<5){
print(midterm)
count<-count+1
}
# Write.table()
# Write to an external file
# quote =   # returns TRUE or FALSE, if TRUE; character values will be enclosed by double quotes
# sep ","
seq(a)
fried<-c(1,3,-1,6,2,9)
chicken<-c(1,5,2)
fried*chicken
chicken<-c(1,5,2,4)
fried*chicken
chicken<-c(1,5)
fried*chicken
fried<-c(1,3,-1,6,2,9)
chicken<-c(1,5)
fried+chicken
fried<-c(1,3,-1,6,2,9)
chicken<-c(1,5,4,5)
fried+chicken
library("alr4", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("DBI", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("dplyr", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("faraway", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("markdown", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("rmarkdown", lib.loc="C:/Program Files/R/R-3.5.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.5.2/library")
data("Heights")
View(Heights)
lm(Heights$mheight, Heights$dheight)
lm(Heights$dheight~Heights$mheight)
x <- Heights$mheight
y <- Heights$dheight
lm(y~x)
summary(fit1)
fit1 <- lm(y~x)
summary(fit1)
anova(fit1)
summary(fit1)
confint(fit1, level = 0.9)
#construct a 95% PI when latitude = 40
prediction = predict(fit1, new, se.fit = TRUE, interval = "prediction", level = 0.99, type = "response")
new = data.frame(x = 61)
p = predict(fit1, new, se.fit = TRUE, interval = "prediction", level = 0.99, type = "response")
p$fit1
p$fit
data(prostate)
View(prostate)
a <- Prostate$lcavol
a <- prostate$lcavol
b <- prostate$lpsa
fit <- lm(b~a)
anova(fit)
data(baeskel)
View(baeskel)
c <- baeskel$Sulfur
d <- baeskel$Tension
fit3 <- lm(d~c)
summary(fit3)
dhat <- fitted(fit3)
e <- d - dhat
plot(yhat, e, xlab = 'Fitted Values', ylab = 'Residuals', main = 'Residuals vs Fits')
plot(dhat, e, xlab = 'Fitted Values', ylab = 'Residuals', main = 'Residuals vs Fits')
abline(h = 0, lty = 2)
plot(dhat, e, xlab = 'Fitted Values', ylab = 'Residuals', main = 'Residuals vs Fits')
abline(h = 0, lty = 2)
plot(fit, which=1)
plot(dhat, e, xlab = 'Fitted Values', ylab = 'Residuals', main = 'Residuals vs Fits')
abline(h = 0, lty = 2)
plot(fit3, which=1)
plot(fit3, which = 3)
plot(fit3, which = 2)
data("Heights")
data(Heights)
data(prostate)
data(Heights)
data("prostate")
data("baeskel")
data("Heights")
data("Heights")
x <- Heights$mheight
y <- Heights$dheight
fit1 <- lm(y~x)
summary(fit1)
anova(fit1)
data("Heights")
detach("package:alr4", unload=TRUE)
library("alr4", lib.loc="C:/Program Files/R/R-3.5.2/library")
data("Heights")
library(alr4)
data("Heights")
boston_housing_data <- read.csv("C:/Users/cfman/OneDrive/Desktop/WGU Classes/D206 Data Cleaning/boston_housing_data.csv")
View(boston_housing_data)
head(df,5)
setwd('C:\Users\cfman\OneDrive\Desktop\WGU Classes\D206 Data Cleaning')
install.packages('tidyverse')
setwd('C:\Users\cfman\OneDrive\Desktop\WGUClasses\D206DataCleaning')
setwd('C:/Users/cfman/OneDrive/Desktop/WGUClasses/D206DataCleaning')
library('tidyverse')
df <- read_csv('Boston_housing_data.csv')
head(df,5)
